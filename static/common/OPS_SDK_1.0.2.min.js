(this.org = this.org || {}),
  (org.cometd = {}),
  (org.cometd.JSON = {}),
  (org.cometd.JSON.toJSON = org.cometd.JSON.fromJSON = function (e) {
    throw 'Abstract';
  }),
  (org.cometd.Utils = {}),
  (org.cometd.Utils.isString = function (e) {
    return null != e && ('string' == typeof e || e instanceof String);
  }),
  (org.cometd.Utils.isArray = function (e) {
    return null != e && e instanceof Array;
  }),
  (org.cometd.Utils.inArray = function (e, t) {
    for (var n = 0; n < t.length; ++n) if (e === t[n]) return n;
    return -1;
  }),
  (org.cometd.Utils.setTimeout = function (t, n, e) {
    return window.setTimeout(function () {
      try {
        t._debug('Invoking timed function', n), n();
      } catch (e) {
        t._debug('Exception invoking timed function', n, e);
      }
    }, e);
  }),
  (org.cometd.Utils.clearTimeout = function (e) {
    window.clearTimeout(e);
  }),
  (org.cometd.TransportRegistry = function () {
    var c = [],
      u = {};
    (this.getTransportTypes = function () {
      return c.slice(0);
    }),
      (this.findTransportTypes = function (e, t, n) {
        for (var o = [], r = 0; r < c.length; ++r) {
          var i = c[r];
          !0 === u[i].accept(e, t, n) && o.push(i);
        }
        return o;
      }),
      (this.negotiateTransport = function (e, t, n, o) {
        for (var r = 0; r < c.length; ++r)
          for (var i = c[r], s = 0; s < e.length; ++s)
            if (i === e[s]) {
              var a = u[i];
              if (!0 === a.accept(t, n, o)) return a;
            }
        return null;
      }),
      (this.add = function (e, t, n) {
        for (var o = !1, r = 0; r < c.length; ++r)
          if (c[r] === e) {
            o = !0;
            break;
          }
        return o || ('number' != typeof n ? c.push(e) : c.splice(n, 0, e), (u[e] = t)), !o;
      }),
      (this.find = function (e) {
        for (var t = 0; t < c.length; ++t) if (c[t] === e) return u[e];
        return null;
      }),
      (this.remove = function (e) {
        for (var t = 0; t < c.length; ++t)
          if (c[t] === e) {
            c.splice(t, 1);
            var n = u[e];
            return delete u[e], n;
          }
        return null;
      }),
      (this.clear = function () {
        (c = []), (u = {});
      }),
      (this.reset = function () {
        for (var e = 0; e < c.length; ++e) u[c[e]].reset();
      });
  }),
  (org.cometd.Transport = function () {
    var n, o;
    (this.registered = function (e, t) {
      (n = e), (o = t);
    }),
      (this.unregistered = function () {
        o = n = null;
      }),
      (this._debug = function () {
        o._debug.apply(o, arguments);
      }),
      (this._mixin = function () {
        return o._mixin.apply(o, arguments);
      }),
      (this.getConfiguration = function () {
        return o.getConfiguration();
      }),
      (this.getAdvice = function () {
        return o.getAdvice();
      }),
      (this.setTimeout = function (e, t) {
        return org.cometd.Utils.setTimeout(o, e, t);
      }),
      (this.clearTimeout = function (e) {
        org.cometd.Utils.clearTimeout(e);
      }),
      (this.convertToMessages = function (t) {
        if (org.cometd.Utils.isString(t))
          try {
            return org.cometd.JSON.fromJSON(t);
          } catch (e) {
            throw (this._debug('Could not convert to JSON the following string', '"' + t + '"'), e);
          }
        if (org.cometd.Utils.isArray(t)) return t;
        if (null == t) return [];
        if (t instanceof Object) return [t];
        throw 'Conversion Error ' + t + ', typeof ' + typeof t;
      }),
      (this.accept = function (e, t, n) {
        throw 'Abstract';
      }),
      (this.getType = function () {
        return n;
      }),
      (this.send = function (e, t) {
        throw 'Abstract';
      }),
      (this.reset = function () {
        this._debug('Transport', n, 'reset');
      }),
      (this.abort = function () {
        this._debug('Transport', n, 'aborted');
      }),
      (this.toString = function () {
        return this.getType();
      });
  }),
  (org.cometd.Transport.derive = function (e) {
    function t() {}
    return (t.prototype = e), new t();
  }),
  (org.cometd.RequestTransport = function () {
    var n = new org.cometd.Transport(),
      e = org.cometd.Transport.derive(n),
      o = 0,
      r = null,
      s = [],
      a = [];
    function i(o, r) {
      var e, i, s;
      this.transportSend(o, r),
        (r.expired = !1),
        o.sync ||
          ((e = this.getConfiguration().maxNetworkDelay),
          (i = e),
          !0 === r.metaConnect && (i += this.getAdvice().timeout),
          this._debug('Transport', this.getType(), 'waiting at most', i, 'ms for the response, maxNetworkDelay', e),
          (s = this),
          (r.timeout = this.setTimeout(function () {
            r.expired = !0;
            var e = 'Request ' + r.id + ' of transport ' + s.getType() + ' exceeded ' + i + ' ms max network delay',
              t = { reason: e },
              n = r.xhr;
            (t.httpCode = s.xhrStatus(n)),
              s.abortXHR(n),
              s._debug(e),
              s.complete(r, !1, r.metaConnect),
              o.onFailure(n, o.messages, t);
          }, i)));
    }
    function c(e) {
      var t = ++o,
        n = { id: t, metaConnect: !1, envelope: e };
      s.length < this.getConfiguration().maxConnections - 1
        ? (s.push(n), i.call(this, e, n))
        : (this._debug('Transport', this.getType(), 'queueing request', t, 'envelope', e), a.push([e, n]));
    }
    function u(e, t) {
      var n,
        o,
        r,
        i = org.cometd.Utils.inArray(e, s);
      0 <= i && s.splice(i, 1),
        0 < a.length &&
          ((i = a.shift()),
          (n = i[0]),
          (o = i[1]),
          this._debug('Transport dequeued request', o.id),
          t
            ? (this.getConfiguration().autoBatch &&
                function (e) {
                  for (; 0 < a.length; ) {
                    var t = a[0],
                      n = t[0],
                      t = t[1];
                    if (n.url !== e.url || n.sync !== e.sync) break;
                    a.shift(),
                      (e.messages = e.messages.concat(n.messages)),
                      this._debug('Coalesced', n.messages.length, 'messages from request', t.id);
                  }
                }.call(this, n),
              c.call(this, n),
              this._debug('Transport completed request', e.id, n))
            : (r = this).setTimeout(function () {
                r.complete(o, !1, o.metaConnect);
                var e = { reason: 'Previous request failed' },
                  t = o.xhr;
                (e.httpCode = r.xhrStatus(t)), n.onFailure(t, n.messages, e);
              }, 0));
    }
    return (
      (e.complete = function (e, t, n) {
        n
          ? function (e) {
              if (
                ((e = e.id),
                this._debug('Transport', this.getType(), 'metaConnect complete, request', e),
                null !== r && r.id !== e)
              )
                throw 'Longpoll request mismatch, completing request ' + e;
              r = null;
            }.call(this, e)
          : u.call(this, e, t);
      }),
      (e.transportSend = function (e, t) {
        throw 'Abstract';
      }),
      (e.transportSuccess = function (e, t, n) {
        t.expired ||
          (this.clearTimeout(t.timeout),
          this.complete(t, !0, t.metaConnect),
          n && 0 < n.length ? e.onSuccess(n) : e.onFailure(t.xhr, e.messages, { httpCode: 204 }));
      }),
      (e.transportFailure = function (e, t, n) {
        t.expired ||
          (this.clearTimeout(t.timeout), this.complete(t, !1, t.metaConnect), e.onFailure(t.xhr, e.messages, n));
      }),
      (e.send = function (e, t) {
        (t
          ? function (e) {
              if (null !== r)
                throw 'Concurrent metaConnect requests not allowed, request id=' + r.id + ' not yet completed';
              var t = ++o;
              this._debug('Transport', this.getType(), 'metaConnect send, request', t, 'envelope', e),
                i.call(this, e, (t = { id: t, metaConnect: !0, envelope: e })),
                (r = t);
            }
          : c
        ).call(this, e);
      }),
      (e.abort = function () {
        n.abort();
        for (var e = 0; e < s.length; ++e) {
          var t = s[e];
          t &&
            (this._debug('Aborting request', t),
            this.abortXHR(t.xhr) || this.transportFailure(t.envelope, t, { reason: 'abort' }));
        }
        r &&
          (this._debug('Aborting metaConnect request', r),
          this.abortXHR(r.xhr) || this.transportFailure(r.envelope, r, { reason: 'abort' })),
          this.reset();
      }),
      (e.reset = function () {
        n.reset(), (r = null), (s = []), (a = []);
      }),
      (e.abortXHR = function (e) {
        if (e)
          try {
            var t = e.readyState;
            return e.abort(), t !== XMLHttpRequest.UNSENT;
          } catch (e) {
            this._debug(e);
          }
        return !1;
      }),
      (e.xhrStatus = function (e) {
        if (e)
          try {
            return e.status;
          } catch (e) {
            this._debug(e);
          }
        return -1;
      }),
      e
    );
  }),
  (org.cometd.LongPollingTransport = function () {
    var e = new org.cometd.RequestTransport(),
      t = org.cometd.Transport.derive(e),
      a = !0;
    return (
      (t.accept = function (e, t, n) {
        return a || !t;
      }),
      (t.xhrSend = function (e) {
        throw 'Abstract';
      }),
      (t.transportSend = function (r, i) {
        this._debug('Transport', this.getType(), 'sending request', i.id, 'envelope', r);
        var s = this;
        try {
          var o = !0;
          (i.xhr = this.xhrSend({
            transport: this,
            url: r.url,
            sync: r.sync,
            headers: this.getConfiguration().requestHeaders,
            body: org.cometd.JSON.toJSON(r.messages),
            onSuccess: function (e) {
              s._debug('Transport', s.getType(), 'received response', e);
              var t,
                n = !1;
              try {
                var o = s.convertToMessages(e);
                0 === o.length
                  ? ((a = !1), s.transportFailure(r, i, { httpCode: 204 }))
                  : ((n = !0), s.transportSuccess(r, i, o));
              } catch (e) {
                s._debug(e),
                  n || ((a = !1), ((t = { exception: e }).httpCode = s.xhrStatus(i.xhr)), s.transportFailure(r, i, t));
              }
            },
            onError: function (e, t) {
              s._debug('Transport', s.getType(), 'received error', e, t), (a = !1);
              var n = { reason: e, exception: t };
              (n.httpCode = s.xhrStatus(i.xhr)),
                o
                  ? s.setTimeout(function () {
                      s.transportFailure(r, i, n);
                    }, 0)
                  : s.transportFailure(r, i, n);
            },
          })),
            (o = !1);
        } catch (e) {
          (a = !1),
            this.setTimeout(function () {
              s.transportFailure(r, i, { exception: e });
            }, 0);
        }
      }),
      (t.reset = function () {
        e.reset(), (a = !0);
      }),
      t
    );
  }),
  (org.cometd.CallbackPollingTransport = function () {
    var e = new org.cometd.RequestTransport(),
      e = org.cometd.Transport.derive(e);
    function f(e, t, n) {
      var o = this;
      return function () {
        o.transportFailure(e, t, 'error', n);
      };
    }
    return (
      (e.accept = function (e, t, n) {
        return !0;
      }),
      (e.jsonpSend = function (e) {
        throw 'Abstract';
      }),
      (e.transportSend = function (e, o) {
        for (var r = this, t = 0, n = e.messages.length, i = []; 0 < n; ) {
          var s = org.cometd.JSON.toJSON(e.messages.slice(t, t + n)),
            a = e.url.length + encodeURI(s).length,
            s = this.getConfiguration().maxURILength;
          if (s < a) {
            if (1 === n) {
              s = 'Bayeux message too big (' + a + ' bytes, max is ' + s + ') for transport ' + this.getType();
              return void this.setTimeout(f.call(this, e, o, s), 0);
            }
            --n;
          } else i.push(n), (t += n), (n = e.messages.length - t);
        }
        var c = e;
        if (1 < i.length) {
          var u = i[0];
          this._debug('Transport', this.getType(), 'split', e.messages.length, 'messages into', i.join(' + ')),
            ((c = this._mixin(!1, {}, e)).messages = e.messages.slice(0, u)),
            (c.onSuccess = e.onSuccess),
            (c.onFailure = e.onFailure);
          for (var l = 1; l < i.length; ++l) {
            var d = this._mixin(!1, {}, e),
              g = u;
            (u += i[l]),
              (d.messages = e.messages.slice(g, u)),
              (d.onSuccess = e.onSuccess),
              (d.onFailure = e.onFailure),
              this.send(d, o.metaConnect);
          }
        }
        this._debug('Transport', this.getType(), 'sending request', o.id, 'envelope', c);
        try {
          var h = !0;
          this.jsonpSend({
            transport: this,
            url: c.url,
            sync: c.sync,
            headers: this.getConfiguration().requestHeaders,
            body: org.cometd.JSON.toJSON(c.messages),
            onSuccess: function (e) {
              var t = !1;
              try {
                var n = r.convertToMessages(e);
                0 === n.length ? r.transportFailure(c, o, { httpCode: 204 }) : ((t = !0), r.transportSuccess(c, o, n));
              } catch (e) {
                r._debug(e), t || r.transportFailure(c, o, { exception: e });
              }
            },
            onError: function (e, t) {
              var n = { reason: e, exception: t };
              h
                ? r.setTimeout(function () {
                    r.transportFailure(c, o, n);
                  }, 0)
                : r.transportFailure(c, o, n);
            },
          }),
            (h = !1);
        } catch (e) {
          this.setTimeout(function () {
            r.transportFailure(c, o, { exception: e });
          }, 0);
        }
      }),
      e
    );
  }),
  (org.cometd.WebSocketTransport = function () {
    var c,
      n = new org.cometd.Transport(),
      e = org.cometd.Transport.derive(n),
      u = !0,
      l = !1,
      d = !0,
      g = null,
      h = null,
      m = !1,
      b = null;
    function f(e, t) {
      e && (this.webSocketClose(e, t.code, t.reason), this.onClose(e, t));
    }
    function p(e) {
      return e === h || e === g;
    }
    function r(e, t, n) {
      for (var o = [], r = 0; r < t.messages.length; ++r) {
        var i = t.messages[r];
        i.id && o.push(i.id);
      }
      (e.envelopes[o.join(',')] = [t, n]),
        this._debug('Transport', this.getType(), 'stored envelope, envelopes', e.envelopes);
    }
    function i(t) {
      if (!h) {
        var e = c.getURL().replace(/^http/, 'ws');
        this._debug('Transport', this.getType(), 'connecting to URL', e);
        try {
          var n = c.getConfiguration().protocol;
          (t.webSocket = n ? new org.cometd.WebSocket(e, n) : new org.cometd.WebSocket(e)), (h = t);
        } catch (e) {
          throw ((u = !1), this._debug('Exception while creating WebSocket object', e), e);
        }
        d = !1 !== c.getConfiguration().stickyReconnect;
        var o = this,
          r = c.getConfiguration().connectTimeout;
        0 < r &&
          (t.connectTimer = this.setTimeout(function () {
            c._debug('Transport', o.getType(), 'timed out while connecting to URL', e, ':', r, 'ms'),
              f.call(o, t, { code: 1e3, reason: 'Connect Timeout' });
          }, r));
        function i(e) {
          (e = e || { code: 1e3 }),
            c._debug('WebSocket onclose', t, e, 'connecting', h, 'current', g),
            t.connectTimer && o.clearTimeout(t.connectTimer),
            o.onClose(t, e);
        }
        (t.webSocket.onopen = function () {
          c._debug('WebSocket onopen', t),
            t.connectTimer && o.clearTimeout(t.connectTimer),
            p(t)
              ? ((g = t), (l = !(h = null)), o.onOpen(t))
              : (c._warn('Closing extra WebSocket connection', this, 'active connection', g),
                f.call(o, t, { code: 1e3, reason: 'Extra Connection' }));
        }),
          (t.webSocket.onclose = i),
          (t.webSocket.onerror = function () {
            i({ code: 1e3, reason: 'Error' });
          }),
          (t.webSocket.onmessage = function (e) {
            c._debug('WebSocket onmessage', e, t), o.onMessage(t, e);
          }),
          this._debug('Transport', this.getType(), 'configured callbacks on', t);
      }
    }
    function s(t, n, e) {
      var o = org.cometd.JSON.toJSON(n.messages);
      t.webSocket.send(o), this._debug('Transport', this.getType(), 'sent', n, 'metaConnect =', e);
      var o = this.getConfiguration().maxNetworkDelay,
        r = o;
      e && ((r += this.getAdvice().timeout), (m = !0));
      for (var i = this, s = [], a = 0; a < n.messages.length; ++a)
        !(function () {
          var e = n.messages[a];
          e.id &&
            (s.push(e.id),
            (t.timeouts[e.id] = this.setTimeout(function () {
              c._debug('Transport', i.getType(), 'timing out message', e.id, 'after', r, 'on', t),
                f.call(i, t, { code: 1e3, reason: 'Message Timeout' });
            }, r)));
        })();
      this._debug(
        'Transport',
        this.getType(),
        'waiting at most',
        r,
        'ms for messages',
        s,
        'maxNetworkDelay',
        o,
        ', timeouts:',
        t.timeouts
      );
    }
    return (
      (e.reset = function () {
        n.reset(), (h = g = null), (m = !(d = !(l = !(u = !0))));
      }),
      (e._notifySuccess = function (e, t) {
        e.call(this, t);
      }),
      (e._notifyFailure = function (e, t, n, o) {
        e.call(this, t, n, o);
      }),
      (e.onOpen = function (e) {
        var t,
          n,
          o,
          r = e.envelopes;
        for (t in (this._debug('Transport', this.getType(), 'opened', e, 'pending messages', r), r))
          r.hasOwnProperty(t) && ((n = (o = r[t])[0]), (o = o[1]), (b = n.onSuccess), s.call(this, e, n, o));
      }),
      (e.onMessage = function (e, t) {
        this._debug('Transport', this.getType(), 'received websocket message', t, e);
        for (var n = !1, o = this.convertToMessages(t.data), r = [], i = 0; i < o.length; ++i) {
          var s,
            a = o[i];
          (/^\/meta\//.test(a.channel) || void 0 === a.data) &&
            a.id &&
            (r.push(a.id),
            (s = e.timeouts[a.id]) &&
              (this.clearTimeout(s),
              delete e.timeouts[a.id],
              this._debug('Transport', this.getType(), 'removed timeout for message', a.id, ', timeouts', e.timeouts))),
            '/meta/connect' === a.channel && (m = !1),
            '/meta/disconnect' !== a.channel || m || (n = !0);
        }
        for (var c = !1, u = e.envelopes, l = 0; l < r.length; ++l) {
          var d,
            g = r[l];
          for (d in u)
            if (u.hasOwnProperty(d)) {
              var h = d.split(','),
                f = org.cometd.Utils.inArray(g, h);
              if (0 <= f) {
                (c = !0), h.splice(f, 1);
                var p = u[d][0],
                  f = u[d][1];
                delete u[d], 0 < h.length && (u[h.join(',')] = [p, f]);
                break;
              }
            }
        }
        c && this._debug('Transport', this.getType(), 'removed envelope, envelopes', u),
          this._notifySuccess(b, o),
          n && this.webSocketClose(e, 1e3, 'Disconnect');
      }),
      (e.onClose = function (e, t) {
        this._debug('Transport', this.getType(), 'closed', e, t), p(e) && ((u = d && l), (g = h = null));
        var n,
          o = e.timeouts;
        for (n in ((e.timeouts = {}), o)) o.hasOwnProperty(n) && this.clearTimeout(o[n]);
        var r,
          i,
          s,
          a = e.envelopes;
        for (r in ((e.envelopes = {}), a))
          a.hasOwnProperty(r) &&
            ((i = a[r][0]),
            a[r][1] && (m = !1),
            (s = { websocketCode: t.code, reason: t.reason }),
            t.exception && (s.exception = t.exception),
            this._notifyFailure(i.onFailure, e, i.messages, s));
      }),
      (e.registered = function (e, t) {
        n.registered(e, t), (c = t);
      }),
      (e.accept = function (e, t, n) {
        return (
          this._debug('Transport', this.getType(), 'accept, supported:', u),
          u && !!org.cometd.WebSocket && !1 !== c.websocketEnabled
        );
      }),
      (e.send = function (e, t) {
        this._debug('Transport', this.getType(), 'sending', e, 'metaConnect =', t),
          function (t, e, n) {
            try {
              null === t
                ? (r.call(this, (t = h || { envelopes: {}, timeouts: {} }), e, n), i.call(this, t))
                : (r.call(this, t, e, n), s.call(this, t, e, n));
            } catch (e) {
              var o = this;
              this.setTimeout(function () {
                f.call(o, t, { code: 1e3, reason: 'Exception', exception: e });
              }, 0);
            }
          }.call(this, g, e, t);
      }),
      (e.webSocketClose = function (e, t, n) {
        try {
          e.webSocket && e.webSocket.close(t, n);
        } catch (e) {
          this._debug(e);
        }
      }),
      (e.abort = function () {
        n.abort(), f.call(this, g, { code: 1e3, reason: 'Abort' }), this.reset();
      }),
      e
    );
  }),
  (org.cometd.CometD = function (e) {
    var l,
      i,
      s,
      c,
      u,
      d = this,
      t = e || 'default',
      g = !1,
      h = new org.cometd.TransportRegistry(),
      n = 'disconnected',
      o = 0,
      f = null,
      a = 0,
      r = [],
      p = !1,
      m = {},
      b = 0,
      v = null,
      T = [],
      y = {},
      _ = {},
      w = {},
      x = !1,
      k = !1,
      S = {
        protocol: null,
        stickyReconnect: !0,
        connectTimeout: 0,
        maxConnections: 2,
        backoffIncrement: 1e3,
        maxBackoff: 6e4,
        logLevel: 'info',
        reverseIncomingExtensions: !0,
        maxNetworkDelay: 1e4,
        requestHeaders: {},
        appendMessageTypeToURL: !0,
        autoBatch: !1,
        maxURILength: 2e3,
        advice: { timeout: 6e4, interval: 0, reconnect: 'retry' },
      };
    function C(e, t) {
      try {
        return e[t];
      } catch (e) {
        return;
      }
    }
    function U(e) {
      return org.cometd.Utils.isString(e);
    }
    function L(e) {
      return null != e && 'function' == typeof e;
    }
    function I(e, t) {
      for (var n = ''; 0 < --t && !(e >= Math.pow(10, t)); ) n += '0';
      return (n += e);
    }
    function R(e, t) {
      var n;
      !window.console ||
        (L((n = window.console[e])) &&
          ((e = new Date()),
          [].splice.call(
            t,
            0,
            0,
            I(e.getHours(), 2) +
              ':' +
              I(e.getMinutes(), 2) +
              ':' +
              I(e.getSeconds(), 2) +
              '.' +
              I(e.getMilliseconds(), 3)
          ),
          n.apply(window.console, t)));
    }
    function E(e) {
      var t;
      !e ||
        ((t = m[e.channel]) &&
          t[e.id] &&
          (delete t[e.id], d._debug('Removed', e.listener ? 'listener' : 'subscription', e)));
    }
    function O(e) {
      e && !e.listener && E(e);
    }
    function q() {
      for (var e in m)
        if (m.hasOwnProperty(e)) {
          var t = m[e];
          if (t) for (var n = 0; n < t.length; ++n) O(t[n]);
        }
    }
    function N(e) {
      n !== e && (d._debug('Status', n, '->', e), (n = e));
    }
    function F() {
      return 'disconnecting' === n || 'disconnected' === n;
    }
    function A() {
      return '' + ++o;
    }
    function j(e, t, n, o, r) {
      try {
        return t.call(e, o);
      } catch (e) {
        var i = d.onExtensionException;
        if (L(i)) {
          d._debug('Invoking extension exception handler', n, e);
          try {
            i.call(d, e, n, r, o);
          } catch (e) {
            d._info('Exception during execution of extension exception handler', n, e);
          }
        } else d._info('Exception during execution of extension', n, e);
        return o;
      }
    }
    function J(e, t) {
      var n = m[e];
      if (n && 0 < n.length)
        for (var o = 0; o < n.length; ++o) {
          var r = n[o];
          if (r)
            try {
              r.callback.call(r.scope, t);
            } catch (e) {
              var i = d.onListenerException;
              if (L(i)) {
                d._debug('Invoking listener exception handler', r, e);
                try {
                  i.call(d, e, r, r.listener, t);
                } catch (e) {
                  d._info('Exception during execution of listener exception handler', r, e);
                }
              } else d._info('Exception during execution of listener', r, t, e);
            }
        }
    }
    function M(e, t) {
      J(e, t);
      for (var n = e.split('/'), o = n.length - 1, r = o; 0 < r; --r) {
        var i = n.slice(0, r).join('/') + '/*';
        r === o && J(i, t), J((i += '*'), t);
      }
    }
    function D() {
      null !== v && org.cometd.Utils.clearTimeout(v), (v = null);
    }
    function B(e) {
      D();
      var t = y.interval + b;
      d._debug('Function scheduled in', t, 'ms, interval =', y.interval, 'backoff =', b, e),
        (v = org.cometd.Utils.setTimeout(d, e, t));
    }
    function H(e, t, n, o) {
      for (var r, i = 0; i < t.length; ++i) {
        var s = t[i],
          a = s.id;
        f && (s.clientId = f),
          null !=
          (s = (function (e) {
            for (var t = 0; t < T.length && null != e; ++t) {
              var n = T[t],
                o = n.extension.outgoing;
              L(o) && (e = void 0 === (n = j(n.extension, o, n.name, e, !0)) ? e : n);
            }
            return e;
          })(s))
            ? ((s.id = a), (t[i] = s))
            : (delete _[a], t.splice(i--, 1));
      }
      0 !== t.length &&
        ((r = d.getURL()),
        S.appendMessageTypeToURL && (r.match(/\/$/) || (r += '/'), o && (r += o)),
        (e = {
          url: r,
          sync: e,
          messages: t,
          onSuccess: function (e) {
            try {
              c.call(d, e);
            } catch (e) {
              d._info('Exception during handling of messages', e);
            }
          },
          onFailure: function (e, t, n) {
            try {
              var o = d.getTransport();
              (n.connectionType = o ? o.getType() : 'unknown'), u.call(d, e, t, n);
            } catch (e) {
              d._info('Exception during handling of failure', e);
            }
          },
        }),
        d._debug('Send', e),
        l.send(e, n));
    }
    function P(e) {
      0 < a || !0 === p ? r.push(e) : H(!1, [e], !1);
    }
    function W() {
      b = 0;
    }
    function X() {
      b < S.maxBackoff && (b += S.backoffIncrement);
    }
    function $() {
      var e = r;
      (r = []), 0 < e.length && H(!1, e, !1);
    }
    function z() {
      N('connecting'),
        B(function () {
          var e;
          F() ||
            ((e = { id: A(), channel: '/meta/connect', connectionType: l.getType() }),
            k || (e.advice = { timeout: 0 }),
            N('connecting'),
            d._debug('Connect sent', e),
            H(!1, [e], !0, 'connect'),
            N('connected'));
        });
    }
    function G(e) {
      e && ((y = d._mixin(!1, {}, S.advice, e)), d._debug('New advice', y));
    }
    function Q(e) {
      D(),
        e && l && l.abort(),
        (f = null),
        N('disconnected'),
        W(),
        (l = null),
        (a = 0) < r.length && ((e = r), (r = []), u.call(d, void 0, e, { reason: 'Disconnected' }));
    }
    function V(e, t, n) {
      var o = d.onTransportException;
      if (L(o)) {
        d._debug('Invoking transport exception handler', e, t, n);
        try {
          o.call(d, n, e, t);
        } catch (e) {
          d._info('Exception during execution of transport exception handler', e);
        }
      }
    }
    function K(e, t) {
      L(e) && ((t = e), (e = void 0)),
        (f = null),
        q(),
        F() ? (h.reset(), G(S.advice)) : G(d._mixin(!1, y, { reconnect: 'retry' })),
        (p = !(a = 0)),
        (i = e),
        (s = t);
      var n = '1.0',
        o = d.getURL(),
        r = h.findTransportTypes(n, g, o),
        e = {
          id: A(),
          version: n,
          minimumVersion: n,
          channel: '/meta/handshake',
          supportedConnectionTypes: r,
          advice: { timeout: y.timeout, interval: y.interval },
        },
        e = d._mixin(!1, {}, i, e);
      if ((d._putCallback(e.id, t), !l && !(l = h.negotiateTransport(r, n, g, o)))) {
        o = 'Could not find initial transport among: ' + h.getTransportTypes();
        throw (d._warn(o), o);
      }
      d._debug('Initial transport is', l.getType()),
        N('handshaking'),
        d._debug('Handshake sent', e),
        H(!1, [e], !1, 'handshake');
    }
    function Y() {
      N('handshaking'),
        (p = !0),
        B(function () {
          K(i, s);
        });
    }
    function Z(e, t) {
      try {
        e.call(d, t);
      } catch (e) {
        var n = d.onCallbackException;
        if (L(n)) {
          d._debug('Invoking callback exception handler', e);
          try {
            n.call(d, e, t);
          } catch (e) {
            d._info('Exception during execution of callback exception handler', e);
          }
        } else d._info('Exception during execution of message callback', e);
      }
    }
    function ee(e) {
      var t = d._getCallback([e.id]);
      L(t) && (delete _[e.id], Z(t, e));
    }
    function te(e) {
      var t = w[e.id];
      if ((delete w[e.id], d._debug('Handling remote call response for', e, 'with context', t), t)) {
        var n = t.timeout;
        n && org.cometd.Utils.clearTimeout(n);
        t = t.callback;
        if (L(t)) return Z(t, e), 1;
      }
    }
    function ne(e) {
      ee(e), M('/meta/handshake', e), M('/meta/unsuccessful', e), !F() && 'none' !== y.reconnect ? (X(), Y()) : Q(!0);
    }
    function oe(e) {
      M('/meta/connect', e), M('/meta/unsuccessful', e);
      var t = F() ? 'none' : y.reconnect;
      switch (t) {
        case 'retry':
          z(), X();
          break;
        case 'handshake':
          h.reset(), W(), Y();
          break;
        case 'none':
          Q(!0);
          break;
        default:
          throw 'Unrecognized advice action' + t;
      }
    }
    function re(e) {
      Q(!0), ee(e), M('/meta/disconnect', e), M('/meta/unsuccessful', e);
    }
    function ie(e) {
      var t = m[e.subscription];
      if (t)
        for (var n = t.length - 1; 0 <= n; --n) {
          var o = t[n];
          if (o && !o.listener) {
            delete t[n], d._debug('Removed failed subscription', o);
            break;
          }
        }
      ee(e), M('/meta/subscribe', e), M('/meta/unsuccessful', e);
    }
    function se(e) {
      ee(e), M('/meta/unsubscribe', e), M('/meta/unsuccessful', e);
    }
    function ae(e) {
      te(e) || (ee(e), M('/meta/publish', e), M('/meta/unsuccessful', e));
    }
    function ce(e) {
      var t, n;
      if (
        ((e = (function (e) {
          for (var t = 0; t < T.length && null != e; ++t) {
            var n = S.reverseIncomingExtensions ? T.length - 1 - t : t,
              o = T[n],
              n = o.extension.incoming;
            L(n) && (e = void 0 === (o = j(o.extension, n, o.name, e, !1)) ? e : o);
          }
          return e;
        })(e)),
        null != e)
      )
        switch ((G(e.advice), e.channel)) {
          case '/meta/handshake':
            !(function (e) {
              if (e.successful) {
                f = e.clientId;
                var t = d.getURL(),
                  n = h.negotiateTransport(e.supportedConnectionTypes, e.version, g, t);
                if (null === n) {
                  var o =
                      'Could not negotiate transport with server; client=[' +
                      h.findTransportTypes(e.version, g, t) +
                      '], server=[' +
                      e.supportedConnectionTypes +
                      ']',
                    t = d.getTransport();
                  return (
                    V(t.getType(), null, { reason: o, connectionType: t.getType(), transport: t }), d._warn(o), Q(!0), 0
                  );
                }
                l !== n && (d._debug('Transport', l.getType(), '->', n.getType()), (l = n)),
                  (p = !1),
                  $(),
                  (e.reestablish = x),
                  (x = !0),
                  ee(e),
                  M('/meta/handshake', e);
                var r = F() ? 'none' : y.reconnect;
                switch (r) {
                  case 'retry':
                    W(), z();
                    break;
                  case 'none':
                    Q(!0);
                    break;
                  default:
                    throw 'Unrecognized advice action ' + r;
                }
              } else ne(e);
            })(e);
            break;
          case '/meta/connect':
            !(function (e) {
              if ((k = e.successful)) {
                M('/meta/connect', e);
                var t = F() ? 'none' : y.reconnect;
                switch (t) {
                  case 'retry':
                    W(), z();
                    break;
                  case 'none':
                    Q(!1);
                    break;
                  default:
                    throw 'Unrecognized advice action ' + t;
                }
              } else oe(e);
            })(e);
            break;
          case '/meta/disconnect':
            (n = e).successful ? (Q(!1), ee(n), M('/meta/disconnect', n)) : re(n);
            break;
          case '/meta/subscribe':
            (n = e).successful ? (ee(n), M('/meta/subscribe', n)) : ie(n);
            break;
          case '/meta/unsubscribe':
            (t = e).successful ? (ee(t), M('/meta/unsubscribe', t)) : se(t);
            break;
          default:
            void 0 !== (t = e).data
              ? te(t) || M(t.channel, t)
              : void 0 === t.successful
              ? d._warn('Unknown Bayeux Message', t)
              : t.successful
              ? (ee(t), M('/meta/publish', t))
              : ae(t);
        }
    }
    function ue(e) {
      var t = m[e];
      if (t) for (var n = 0; n < t.length; ++n) if (t[n]) return 1;
    }
    function le(e, t) {
      var n = { scope: e, method: t };
      if (L(e)) (n.scope = void 0), (n.method = e);
      else if (U(t)) {
        if (!e) throw 'Invalid scope ' + e;
        if (((n.method = e[t]), !L(n.method))) throw 'Invalid callback ' + t + ' for scope ' + e;
      } else if (!L(t)) throw 'Invalid callback ' + t;
      return n;
    }
    function de(e, t, n, o) {
      t = le(t, n);
      d._debug('Adding', o ? 'listener' : 'subscription', 'on', e, 'with scope', t.scope, 'and callback', t.method);
      (n = { channel: e, scope: t.scope, callback: t.method, listener: o }), (t = m[e]);
      return (
        t || ((t = []), (m[e] = t)),
        (n.id = t.push(n) - 1),
        d._debug('Added', o ? 'listener' : 'subscription', n),
        (n[0] = e),
        (n[1] = n.id),
        n
      );
    }
    (this._mixin = function (e, t, n) {
      for (var o = t || {}, r = 2; r < arguments.length; ++r) {
        var i,
          s,
          a = arguments[r];
        if (null != a)
          for (var c in a)
            a.hasOwnProperty(c) &&
              ((i = C(a, c)),
              (s = C(o, c)),
              i !== t &&
                void 0 !== i &&
                (e && 'object' == typeof i && null !== i
                  ? i instanceof Array
                    ? (o[c] = this._mixin(e, s instanceof Array ? s : [], i))
                    : ((s = 'object' != typeof s || s instanceof Array ? {} : s), (o[c] = this._mixin(e, s, i)))
                  : (o[c] = i)));
      }
      return o;
    }),
      (this._warn = function () {
        R('warn', arguments);
      }),
      (this._info = function () {
        'warn' !== S.logLevel && R('info', arguments);
      }),
      (this._debug = function () {
        'debug' === S.logLevel && R('debug', arguments);
      }),
      (this._isCrossDomain = function (e) {
        return e && e !== window.location.host;
      }),
      (this.send = P),
      (this._getCallback = function (e) {
        return _[e];
      }),
      (this._putCallback = function (e, t) {
        var n = this._getCallback(e);
        return L(t) && (_[e] = t), n;
      }),
      (this.receive = ce),
      (c = function (e) {
        d._debug('Received', e);
        for (var t = 0; t < e.length; ++t) ce(e[t]);
      }),
      (u = function (e, t, n) {
        d._debug('handleFailure', e, t, n), (n.transport = e);
        for (var o, r, i, s, a = 0; a < t.length; ++a) {
          var c = t[a],
            u = { id: c.id, successful: !1, channel: c.channel, failure: n };
          switch ((n.message = c).channel) {
            case '/meta/handshake':
              (o = u),
                (s = i = r = void 0),
                (r = d.getURL()),
                (i = d.getTransport()),
                (s = h.findTransportTypes('1.0', g, r)),
                (r = h.negotiateTransport(s, '1.0', g, r))
                  ? (d._debug('Transport', i.getType(), '->', r.getType()),
                    V(i.getType(), r.getType(), o.failure),
                    ne(o),
                    (l = r))
                  : (V(i.getType(), null, o.failure),
                    d._warn('Could not negotiate transport; client=[' + s + ']'),
                    Q(!0),
                    ne(o));
              break;
            case '/meta/connect':
              (k = !1), oe(u);
              break;
            case '/meta/disconnect':
              re(u);
              break;
            case '/meta/subscribe':
              (u.subscription = c.subscription), ie(u);
              break;
            case '/meta/unsubscribe':
              (u.subscription = c.subscription), se(u);
              break;
            default:
              ae(u);
          }
        }
      }),
      (this.registerTransport = function (e, t, n) {
        n = h.add(e, t, n);
        return n && (this._debug('Registered transport', e), L(t.registered) && t.registered(e, this)), n;
      }),
      (this.getTransportTypes = function () {
        return h.getTransportTypes();
      }),
      (this.unregisterTransport = function (e) {
        var t = h.remove(e);
        return null !== t && (this._debug('Unregistered transport', e), L(t.unregistered) && t.unregistered()), t;
      }),
      (this.unregisterTransports = function () {
        h.clear();
      }),
      (this.findTransport = function (e) {
        return h.find(e);
      }),
      (this.configure = function (e) {
        (function (e) {
          if (
            (d._debug('Configuring cometd object with', e),
            U(e) && (e = { url: e }),
            (e = e || {}),
            (S = d._mixin(!1, S, e)),
            !(t = d.getURL()))
          )
            throw "Missing required configuration parameter 'url' specifying the Bayeux server URL";
          var e = (n = /(^https?:\/\/)?(((\[[^\]]+\])|([^:\/\?#]+))(:(\d+))?)?([^\?#]*)(.*)?/.exec(t))[2],
            t = n[8],
            n = n[9];
          (g = d._isCrossDomain(e)),
            S.appendMessageTypeToURL &&
              (void 0 !== n && 0 < n.length
                ? (d._info(
                    'Appending message type to URI ' +
                      t +
                      n +
                      " is not supported, disabling 'appendMessageTypeToURL' configuration"
                  ),
                  (S.appendMessageTypeToURL = !1))
                : ((n = (e = t.split('/')).length - 1),
                  t.match(/\/$/) && --n,
                  0 <= e[n].indexOf('.') &&
                    (d._info(
                      'Appending message type to URI ' +
                        t +
                        " is not supported, disabling 'appendMessageTypeToURL' configuration"
                    ),
                    (S.appendMessageTypeToURL = !1))));
        }.call(this, e));
      }),
      (this.init = function (e, t) {
        this.configure(e), this.handshake(t);
      }),
      (this.handshake = function (e, t) {
        N('disconnected'), (x = !1), K(e, t);
      }),
      (this.disconnect = function (e, t, n) {
        var o;
        F() ||
          ('boolean' != typeof e && ((n = t), (t = e), (e = !1)),
          L(t) && ((n = t), (t = void 0)),
          (o = { id: A(), channel: '/meta/disconnect' }),
          (o = this._mixin(!1, {}, t, o)),
          d._putCallback(o.id, n),
          N('disconnecting'),
          H(!0 === e, [o], !1, 'disconnect'));
      }),
      (this.startBatch = function () {
        ++a, d._debug('Starting batch, depth', a);
      }),
      (this.endBatch = function () {
        !(function () {
          if ((--a, d._debug('Ending batch, depth', a), a < 0))
            throw 'Calls to startBatch() and endBatch() are not paired';
          0 !== a || F() || p || $();
        })();
      }),
      (this.batch = function (e, t) {
        var n = le(e, t);
        this.startBatch();
        try {
          n.method.call(n.scope), this.endBatch();
        } catch (e) {
          throw (this._info('Exception during execution of batch', e), this.endBatch(), e);
        }
      }),
      (this.addListener = function (e, t, n) {
        if (arguments.length < 2) throw 'Illegal arguments number: required 2, got ' + arguments.length;
        if (!U(e)) throw 'Illegal argument type: channel must be a string';
        return de(e, t, n, !0);
      }),
      (this.removeListener = function (e) {
        if (!(e && e.channel && 'id' in e)) throw 'Invalid argument: expected subscription, not ' + e;
        E(e);
      }),
      (this.clearListeners = function () {
        m = {};
      }),
      (this.subscribe = function (e, t, n, o, r) {
        if (arguments.length < 2) throw 'Illegal arguments number: required 2, got ' + arguments.length;
        if (!U(e)) throw 'Illegal argument type: channel must be a string';
        if (F()) throw 'Illegal state: already disconnected';
        L(t) && ((r = o), (o = n), (n = t), (t = void 0)), L(o) && ((r = o), (o = void 0));
        var i = !ue(e),
          s = de(e, t, n, !1);
        return (
          i &&
            ((i = { id: A(), channel: '/meta/subscribe', subscription: e }),
            (i = this._mixin(!1, {}, o, i)),
            d._putCallback(i.id, r),
            P(i)),
          s
        );
      }),
      (this.unsubscribe = function (e, t, n) {
        if (arguments.length < 1) throw 'Illegal arguments number: required 1, got ' + arguments.length;
        if (F()) throw 'Illegal state: already disconnected';
        L(t) && ((n = t), (t = void 0)), this.removeListener(e);
        var o = e.channel;
        ue(o) ||
          ((o = { id: A(), channel: '/meta/unsubscribe', subscription: o }),
          (o = this._mixin(!1, {}, t, o)),
          d._putCallback(o.id, n),
          P(o));
      }),
      (this.resubscribe = function (e, t) {
        if ((O(e), e)) return this.subscribe(e.channel, e.scope, e.callback, t);
      }),
      (this.clearSubscriptions = function () {
        q();
      }),
      (this.publish = function (e, t, n, o) {
        if (arguments.length < 1) throw 'Illegal arguments number: required 1, got ' + arguments.length;
        if (!U(e)) throw 'Illegal argument type: channel must be a string';
        if (/^\/meta\//.test(e)) throw 'Illegal argument: cannot publish to meta channels';
        if (F()) throw 'Illegal state: already disconnected';
        L(t) ? ((o = t), (t = n = {})) : L(n) && ((o = n), (n = {}));
        var r = { id: A(), channel: e, data: t },
          r = this._mixin(!1, {}, n, r);
        d._putCallback(r.id, o), P(r);
      }),
      (this.remoteCall = function (e, t, n, o) {
        if (arguments.length < 1) throw 'Illegal arguments number: required 1, got ' + arguments.length;
        if (!U(e)) throw 'Illegal argument type: target must be a string';
        if (F()) throw 'Illegal state: already disconnected';
        if (
          (L(t) ? ((o = t), (t = {}), (n = S.maxNetworkDelay)) : L(n) && ((o = n), (n = S.maxNetworkDelay)),
          'number' != typeof n)
        )
          throw 'Illegal argument type: timeout must be a number';
        e.match(/^\//) || (e = '/' + e);
        var r = { id: A(), channel: '/service' + e, data: t },
          i = { callback: o };
        0 < n &&
          ((i.timeout = org.cometd.Utils.setTimeout(
            d,
            function () {
              d._debug('Timing out remote call', r, 'after', n, 'ms'),
                ae({
                  id: r.id,
                  error: '406::timeout',
                  successful: !1,
                  failure: { message: r, reason: 'Remote Call Timeout' },
                });
            },
            n
          )),
          d._debug('Scheduled remote call timeout', r, 'in', n, 'ms')),
          (w[r.id] = i),
          P(r);
      }),
      (this.getStatus = function () {
        return n;
      }),
      (this.isDisconnected = F),
      (this.setBackoffIncrement = function (e) {
        S.backoffIncrement = e;
      }),
      (this.getBackoffIncrement = function () {
        return S.backoffIncrement;
      }),
      (this.getBackoffPeriod = function () {
        return b;
      }),
      (this.setLogLevel = function (e) {
        S.logLevel = e;
      }),
      (this.registerExtension = function (e, t) {
        if (arguments.length < 2) throw 'Illegal arguments number: required 2, got ' + arguments.length;
        if (!U(e)) throw 'Illegal argument type: extension name must be a string';
        for (var n = !1, o = 0; o < T.length; ++o)
          if (T[o].name === e) {
            n = !0;
            break;
          }
        return n
          ? (this._info(
              'Could not register extension with name',
              e,
              'since another extension with the same name already exists'
            ),
            !1)
          : (T.push({ name: e, extension: t }),
            this._debug('Registered extension', e),
            L(t.registered) && t.registered(e, this),
            !0);
      }),
      (this.unregisterExtension = function (e) {
        if (!U(e)) throw 'Illegal argument type: extension name must be a string';
        for (var t = !1, n = 0; n < T.length; ++n) {
          var o = T[n];
          if (o.name === e) {
            T.splice(n, 1), (t = !0), this._debug('Unregistered extension', e);
            o = o.extension;
            L(o.unregistered) && o.unregistered();
            break;
          }
        }
        return t;
      }),
      (this.getExtension = function (e) {
        for (var t = 0; t < T.length; ++t) {
          var n = T[t];
          if (n.name === e) return n.extension;
        }
        return null;
      }),
      (this.getName = function () {
        return t;
      }),
      (this.getClientId = function () {
        return f;
      }),
      (this.getURL = function () {
        if (l && 'object' == typeof S.urls) {
          var e = S.urls[l.getType()];
          if (e) return e;
        }
        return S.url;
      }),
      (this.getTransport = function () {
        return l;
      }),
      (this.getConfiguration = function () {
        return this._mixin(!0, {}, S);
      }),
      (this.getAdvice = function () {
        return this._mixin(!0, {}, y);
      }),
      (org.cometd.WebSocket = window.WebSocket);
  });
var cometdUrl = '',
  OlymCometd = (function () {
    function t(r) {
      var i = opsJquery.cometd;
      (this._messageTypeList = null), (this._user = '');
      var s = this;
      (this.init = function () {
        if (null != r) {
          null != r.messageTypeList && (s._messageTypeList = r.messageTypeList),
            i.configure({
              url: null == r.url ? cometdUrl + '/ops-ds/cometd' : r.url,
              logLevel: null == r.logLevel ? 'info' : r.logLevel,
            }),
            i.addListener('/meta/handshake', this.metaHandshake),
            i.addListener('/meta/connect', this.metaConnect),
            (s._user = r.userId + '_' + r.orgId + '_' + r.appCode);
          var e = [];
          if (null != s._messageTypeList) {
            var t,
              n = 0;
            for (t in s._messageTypeList) (e[n] = t), n++;
          }
          var o = { ext: { user: s._user, messageTypeList: e } };
          i.handshake(o);
        }
      }),
        (this.connected = !1),
        (this._onconnect = function () {}),
        (this._ondisconnect = function () {}),
        (this._connectclosed = function () {}),
        (this.metaConnect = function (e) {
          if (i.isDisconnected()) return (s.connected = !1), void s._connectclosed();
          var t = s.connected;
          (s.connected = !0 === e.successful),
            !t && s.connected ? s._onconnect() : t && !s.connected && s._ondisconnect();
        }),
        (this.metaHandshake = function (e) {
          !0 === e.successful &&
            i.batch(function () {
              i.subscribe('/common/cometd', function (e) {
                var t,
                  n = s._messageTypeList;
                for (t in n) if (e.data.messageType == t && 'function' == typeof n[t]) return void n[t](e.data);
              }),
                i.subscribe('/common/all', function (e) {
                  var t,
                    n = s._messageTypeList;
                  for (t in n) if (e.data.messageType == t && 'function' == typeof n[t]) return void n[t](e.data);
                });
            });
        }),
        (this.addMessageType = function (e) {
          if (null != e) {
            var t,
              n = '';
            for (t in e) n = t + '_';
            (s._messageTypeList = opsJquery.extend({}, s._messageTypeList, e)),
              '' != n && (n = n.substring(0, n.length - 1)),
              opsJquery.ajax({
                url: cometdUrl + '/ops-ds/addMessageType',
                type: 'get',
                dataType: 'jsonp',
                data: { messageType: n, user: s._user },
                jsonp: 'jsonpcallback',
                success: function (e) {},
                error: function (e, t, n) {},
              });
          }
        });
    }
    var n;
    return {
      getInstance: function (e) {
        if (((cometdUrl = window.location.protocol + '//' + e.cometdUrl), void 0 === n)) (n = new t(e)).init();
        else {
          e = e.userId + '_' + e.orgId + '_' + e.appCode;
          if (n._user !== e && window.console) {
            console.error('OlymCometd对象已存在，请不要用不同用户重复创建！');
            try {
              throw new Error();
            } catch (e) {
              return console.error('Stack:' + e.stack), null;
            }
          }
        }
        return n;
      },
    };
  })();
!(function () {
  function t(e, t) {
    if (t) for (var n in t) 'content-type' !== n.toLowerCase() && e.setRequestHeader(n, t[n]);
  }
  function n() {
    var e = new i.LongPollingTransport(),
      e = i.Transport.derive(e);
    return (
      (e.xhrSend = function (o) {
        return r.ajax({
          url: o.url,
          async: !0 !== o.sync,
          type: 'POST',
          contentType: 'application/json;charset=UTF-8',
          data: o.body,
          global: !1,
          xhrFields: { withCredentials: !0 },
          beforeSend: function (e) {
            return (e.withCredentials = !0), t(e, o.headers), !0;
          },
          success: o.onSuccess,
          error: function (e, t, n) {
            o.onError(t, n);
          },
        });
      }),
      e
    );
  }
  function o() {
    var e = new i.CallbackPollingTransport(),
      e = i.Transport.derive(e);
    return (
      (e.jsonpSend = function (o) {
        r.ajax({
          url: o.url,
          async: !0 !== o.sync,
          type: 'GET',
          dataType: 'jsonp',
          jsonp: 'jsonp',
          data: { message: o.body },
          beforeSend: function (e) {
            return t(e, o.headers), !0;
          },
          success: o.onSuccess,
          error: function (e, t, n) {
            o.onError(t, n);
          },
        });
      }),
      e
    );
  }
  var r, i;
  (r = jQuery),
    (window.opsJquery = r),
    ((i = org.cometd).JSON.toJSON = JSON.stringify),
    (i.JSON.fromJSON = JSON.parse),
    (r.CometD = function (e) {
      e = new i.CometD(e);
      return (
        i.WebSocket && e.registerTransport('websocket', new i.WebSocketTransport()),
        e.registerTransport('long-polling', new n()),
        e.registerTransport('callback-polling', new o()),
        e
      );
    }),
    (r.cometd = new r.CometD()),
    r.cometd;
})();
