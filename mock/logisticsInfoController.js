const mockjs = require('mockjs');
const mockData = {
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic': {
    data: {
      endRow: '@integer',
      firstPage: '@integer',
      hasNextPage: '@boolean',
      hasPreviousPage: '@boolean',
      isFirstPage: '@boolean',
      isLastPage: '@boolean',
      lastPage: '@integer',
      'list|10': [{ bkgNo: '@id', ctnNo: '@id', id: '@id', sealNo: '@id' }],
      navigatePages: '@integer',
      'navigatepageNums|10': ['@integer'],
      nextPage: '@integer',
      orderBy: '@string',
      pageNum: '@integer',
      pageSize: '@integer',
      pages: '@integer',
      prePage: '@integer',
      size: '@integer',
      startRow: '@integer',
      total: '@integer',
    },
    resultCode: 100,
    resultMsg: '',
    success: true,
  },
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic/backCtnInfo': { resultCode: 100, resultMsg: '', success: true },
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic/detail': {
    data: {
      casenumber: '@id',
      count: '@integer',
      ctnNo: '@id',
      ctnType: '@string',
      destination: {
        actualInWarehouseTime: '@date-time',
        actualOutWarehouseTime: '@date-time',
        actualSigningTime: '@date-time',
        del: '@string',
        delActualArrivedTime: '@date-time',
        delDeparturesTime: '@date-time',
        delPickUpTime: '@date-time',
        pod: '@string',
        podActualArrivedTime: '@date-time',
        podUnloadingTime: '@date-time',
        returnCtnTime: '@date-time',
      },
      doorPacking: {
        arrivedDoorTime: '@date-time',
        driverName: '@string',
        driverPhone: '@string',
        leaveDoorTime: '@date-time',
        licensePlate: '@string',
        pickUpBeginTime: '@date-time',
        pickUpFinishTime: '@date-time',
      },
      id: '@id',
      inbound: {
        actualInboundTime: '@date-time',
        driverName: '@string',
        driverPhone: '@string',
        licensePlate: '@string',
        vgmApplyTime: '@date-time',
        vgmConfirmTime: '@date-time',
      },
      pickUpCtn: {
        actualPickUpCtnAddress: '@string',
        driverName: '@string',
        driverPhone: '@string',
        eirPickUpCtnAddress: '@string',
        eirTime: '@date-time',
        licensePlate: '@string',
        pickUpCtnTime: '@date-time',
      },
      podReleaseDTO: {
        customsApplyTime: '@date-time',
        customsInspectionTime: '@date-time',
        customsReleasedTime: '@date-time',
      },
      polRelease: {
        customsApplyTime: '@date-time',
        customsInspectionTime: '@date-time',
        customsReleasedTime: '@date-time',
        nationalInspectionReleasedTime: '@date-time',
        tallyReleasedTime: '@date-time',
        terminalReleasedTime: '@date-time',
      },
      polSailing: { actualSailingTime: '@date-time', pol: '@string', shipmentTime: '@date-time' },
      polWarehouse: {
        actualInWarehouseTime: '@date-time',
        actualOutWarehouseTime: '@date-time',
        driverName: '@string',
        driverPhone: '@string',
        licensePlate: '@string',
      },
      sealNo: '@id',
      tareWeight: '@float',
      'transitPortSailings|10': [
        {
          actualSailingTime: '@date-time',
          arrivedTime: '@date-time',
          shipmentTime: '@date-time',
          transitPort: '@string',
          unloadingTime: '@date-time',
          vesselName: '@string',
          voyNo: '@id',
        },
      ],
      volume: '@float',
      weight: '@float',
    },
    resultCode: 100,
    resultMsg: '',
    success: true,
  },
  'POST /gm2-fms-rest/rest/logistics/ctn/dynamic/detailList': {
    'data|10': [
      {
        casenumber: '@id',
        containerId: '@id',
        count: '@integer',
        ctnNo: '@id',
        ctnType: '@string',
        deleteFlag: '@string',
        id: '@id',
        sealNo: '@id',
        tareWeight: '@float',
        updateFlag: '@string',
        volume: '@float',
        weight: '@float',
      },
    ],
    resultCode: 100,
    resultMsg: '',
    success: true,
  },
  'GET /gm2-fms-rest/rest/logistics/ctnno': { 'data|10': ['@string'], resultCode: 100, resultMsg: '', success: true },
  'GET /gm2-fms-rest/rest/logistics/node': {
    'data|10': [
      {
        active: false,
        businessName: 'pol',
        noReadyStatus: '待确认',
        nodeIcon: 'icon-zuobiao-fill',
        nodeId: '@id',
        nodeName: '@pol-name',
        numRate: '@string',
        readyStatus: '已确认',
        time: '@string',
      },
    ],
    resultCode: 100,
    resultMsg: '',
    success: true,
  },
  'GET /gm2-fms-rest/rest/logistics/sailing': {
    data: {
      'bkgNoList|10': ['@string'],
      carrier: '@string',
      cutOffTime: '@date-time',
      delAta: '@date-time',
      delEta: '@date-time',
      delPlace: '@string',
      delPlacePortEnName: '@string',
      dischargePort: '@string',
      dischargePortEnName: '@string',
      loadPort: '@string',
      loadPortEnName: '@string',
      nextPort: '@string',
      nextPortActualBerthingTime: '@date-time',
      nextPortActualUnberthingTime: '@date-time',
      nextPortPlannedBerthingTime: '@date-time',
      nextPortPlannedUnberthingTime: '@date-time',
      nextPortVesselName: '@string',
      nextPortVoyNo: '@id',
      nextPorts: '@string',
      ordersCutOffTime: '@date-time',
      pickUpCtnPlace: '@string',
      podAta: '@date-time',
      podEta: '@date-time',
      polActualBerthingTime: '@date-time',
      polActualUnberthingTime: '@date-time',
      polAtd: '@date-time',
      polEtd: '@date-time',
      polMassAddress: '@string',
      polPlannedBerthingTime: '@date-time',
      polPlannedUnberthingTime: '@date-time',
      portCutOffTime: '@date-time',
      portOpeningTime: '@date-time',
      recPlace: '@string',
      recPlaceEnName: '@string',
      returnCabinetPlace: '@string',
      vesselAgentName: '@string',
      vesselName: '@string',
      vgmCutOffTime: '@date-time',
      voyNo: '@id',
    },
    resultCode: 100,
    resultMsg: '',
    success: true,
  },
  'POST /gm2-fms-rest/rest/logistics/test': { resultCode: 100, resultMsg: '', success: true },
  'GET /gm2-fms-rest/rest/logistics/test1': { resultCode: 100, resultMsg: '', success: true },
};

module.exports = {
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/ctn/dynamic']));
  },
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic/backCtnInfo': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/ctn/dynamic/backCtnInfo']));
  },
  'GET /gm2-fms-rest/rest/logistics/ctn/dynamic/detail': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/ctn/dynamic/detail']));
  },
  'POST /gm2-fms-rest/rest/logistics/ctn/dynamic/detailList': (req, res) => {
    res.json(mockjs.mock(mockData['POST /gm2-fms-rest/rest/logistics/ctn/dynamic/detailList']));
  },
  'GET /gm2-fms-rest/rest/logistics/ctnno': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/ctnno']));
  },
  'GET /gm2-fms-rest/rest/logistics/node': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/node']));
  },
  'GET /gm2-fms-rest/rest/logistics/sailing': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/sailing']));
  },
  'POST /gm2-fms-rest/rest/logistics/test': (req, res) => {
    res.json(mockjs.mock(mockData['POST /gm2-fms-rest/rest/logistics/test']));
  },
  'GET /gm2-fms-rest/rest/logistics/test1': (req, res) => {
    res.json(mockjs.mock(mockData['GET /gm2-fms-rest/rest/logistics/test1']));
  },
};
